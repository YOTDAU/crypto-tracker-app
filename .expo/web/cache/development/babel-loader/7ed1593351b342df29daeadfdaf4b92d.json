{"ast":null,"code":"import { FETCHING_COIN_DATA, FETCHING_COIN_DATA_SUCCESS, FETCHING_COIN_DATA_FAIL } from \"../Utilities/ActionTypes\";\nimport { APIBase } from \"../Utilities/Constants\";\nvar initialState = {\n  isFetching: null,\n  data: [],\n  hasError: false,\n  errorMessage: null\n};\n\nvar CryptoReducer = function CryptoReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  var rp = require('request-promise');\n\n  var requestOptions = {\n    method: 'GET',\n    uri: APIBase,\n    qs: {\n      'start': '1',\n      'limit': '5000',\n      'convert': 'USD'\n    },\n    headers: {\n      'X-CMC_PRO_API_KEY': 'c9d10fc5-5a77-4b12-9968-e67a369badd7'\n    },\n    json: true,\n    gzip: true\n  };\n  rp(requestOptions).then(function (response) {\n    console.log('API call response:', response);\n  }).catch(function (err) {\n    console.log('API call error:', err.message);\n  });\n};\n\nexport default CryptoReducer;","map":{"version":3,"sources":["/Users/simon/Documents/GitHub/Crypto-Tracker/crypto-tracker-v1/src/Reducers/CryptoReducer.js"],"names":["FETCHING_COIN_DATA","FETCHING_COIN_DATA_SUCCESS","FETCHING_COIN_DATA_FAIL","APIBase","initialState","isFetching","data","hasError","errorMessage","CryptoReducer","state","action","rp","require","requestOptions","method","uri","qs","headers","json","gzip","then","response","console","log","catch","err","message"],"mappings":"AAAA,SAASA,kBAAT,EAA6BC,0BAA7B,EAAyDC,uBAAzD;AACA,SAASC,OAAT;AAEA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,UAAU,EAAE,IADK;AAEjBC,EAAAA,IAAI,EAAE,EAFW;AAGjBC,EAAAA,QAAQ,EAAE,KAHO;AAIjBC,EAAAA,YAAY,EAAE;AAJG,CAArB;;AAOA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAmC;AAAA,MAAlCC,KAAkC,uEAA1BN,YAA0B;AAAA,MAAZO,MAAY;;AAGrD,MAAMC,EAAE,GAAGC,OAAO,CAAC,iBAAD,CAAlB;;AACA,MAAMC,cAAc,GAAG;AACvBC,IAAAA,MAAM,EAAE,KADe;AAEvBC,IAAAA,GAAG,EAAEb,OAFkB;AAGvBc,IAAAA,EAAE,EAAE;AACA,eAAS,GADT;AAEA,eAAS,MAFT;AAGA,iBAAW;AAHX,KAHmB;AAQvBC,IAAAA,OAAO,EAAE;AACL,2BAAqB;AADhB,KARc;AAWvBC,IAAAA,IAAI,EAAE,IAXiB;AAYvBC,IAAAA,IAAI,EAAE;AAZiB,GAAvB;AAeAR,EAAAA,EAAE,CAACE,cAAD,CAAF,CAAmBO,IAAnB,CAAwB,UAAAC,QAAQ,EAAI;AACpCC,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCF,QAAlC;AACC,GAFD,EAEGG,KAFH,CAES,UAACC,GAAD,EAAS;AAClBH,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BE,GAAG,CAACC,OAAnC;AACC,GAJD;AAoCH,CAvDD;;AAyDA,eAAelB,aAAf","sourcesContent":["import { FETCHING_COIN_DATA, FETCHING_COIN_DATA_SUCCESS, FETCHING_COIN_DATA_FAIL} from '../Utilities/ActionTypes'\nimport { APIBase } from '../Utilities/Constants';\n\nconst initialState = {\n    isFetching: null,\n    data: [],\n    hasError: false,\n    errorMessage: null\n}\n\nconst CryptoReducer = (state = initialState, action ) => {\n\n\n    const rp = require('request-promise');\n    const requestOptions = {\n    method: 'GET',\n    uri: APIBase,\n    qs: {\n        'start': '1',\n        'limit': '5000',\n        'convert': 'USD'\n    },\n    headers: {\n        'X-CMC_PRO_API_KEY': 'c9d10fc5-5a77-4b12-9968-e67a369badd7'\n    },\n    json: true,\n    gzip: true\n    };\n\n    rp(requestOptions).then(response => {\n    console.log('API call response:', response);\n    }).catch((err) => {\n    console.log('API call error:', err.message);\n    });\n\n    // switch(action.type) {\n    //     case FETCHING_COIN_DATA: \n    //         return Object.assign({}, state, {\n    //             isFetching: true,\n    //             data: null,\n    //             hasError: false,\n    //             errorMessage: null\n    //     });\n\n    //     case FETCHING_COIN_DATA_SUCCESS:\n    //         return Object.assign({}, state, {\n    //             isFetching: false,\n    //             data: action.payload,\n    //             hasError: falses,\n    //             errorMessage: null\n    //         });\n\n    //     case FETCHING_COIN_DATA_FAIL: \n    //         return Object.assign({}, state, {\n    //             isFetching: false,\n    //             data: action.payload,\n    //             hasError: true, \n    //             errorMessage: action.err\n                \n    //         })\n\n\n        // default: \n        //     return state\n    // }\n}\n\nexport default CryptoReducer"]},"metadata":{},"sourceType":"module"}