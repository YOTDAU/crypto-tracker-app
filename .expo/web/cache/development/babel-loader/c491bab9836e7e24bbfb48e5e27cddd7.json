{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/simon/Documents/GitHub/Crypto-Tracker/crypto-tracker-v1/src/components/CryptoContainer.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Spinner } from 'react-native-loading-spinner-overlay';\nimport FetchCoinData from \"./../Actions/FetchCoinData\";\nimport CoinCard from \"./CoinCard\";\n\nvar CryptoContainer = function (_Component) {\n  _inherits(CryptoContainer, _Component);\n\n  var _super = _createSuper(CryptoContainer);\n\n  function CryptoContainer() {\n    _classCallCheck(this, CryptoContainer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(CryptoContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this = this;\n\n      this.props.FetchCoinData().then(function (data) {\n        return _this.setState({\n          crypto: data\n        });\n      });\n    }\n  }, {\n    key: \"renderCoinCards\",\n    value: function renderCoinCards() {\n      var crypto = this.props.crypto;\n      return crypto.data.map(function (coin) {\n        return React.createElement(CoinCard, {\n          key: coin.name,\n          coin_name: coin.name,\n          symbol: coin.symbol,\n          price_gbp: coin.quote[\"GBP\"].price,\n          percent_change_24h: coin.quote['GBP'].percent_change_24h,\n          percent_change_7d: coin.quote['GBP'].percent_change_7d,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 13\n          }\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }\n      }, this.renderCoinCards());\n    }\n  }]);\n\n  return CryptoContainer;\n}(Component);\n\nfunction mapStateToProps(state) {\n  return {\n    crypto: state.crypto\n  };\n}\n\nexport default connect(mapStateToProps, {\n  FetchCoinData: FetchCoinData\n})(CryptoContainer);","map":{"version":3,"sources":["/Users/simon/Documents/GitHub/Crypto-Tracker/crypto-tracker-v1/src/components/CryptoContainer.js"],"names":["React","Component","connect","Spinner","FetchCoinData","CoinCard","CryptoContainer","props","then","data","setState","crypto","map","coin","name","symbol","quote","price","percent_change_24h","percent_change_7d","renderCoinCards","mapStateToProps","state"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;;;;;AAEA,SAASC,OAAT,QAAwB,sCAAxB;AAEA,OAAOC,aAAP;AACA,OAAOC,QAAP;;IAGMC,e;;;;;;;;;;;;;wCAEkB;AAAA;;AAChB,WAAKC,KAAL,CAAWH,aAAX,GAA2BI,IAA3B,CAAgC,UAAAC,IAAI;AAAA,eAAI,KAAI,CAACC,QAAL,CAAc;AAACC,UAAAA,MAAM,EAAEF;AAAT,SAAd,CAAJ;AAAA,OAApC;AACH;;;sCAEiB;AAAA,UACNE,MADM,GACK,KAAKJ,KADV,CACNI,MADM;AAGd,aAAOA,MAAM,CAACF,IAAP,CAAYG,GAAZ,CAAgB,UAACC,IAAD;AAAA,eACnB,oBAAC,QAAD;AACI,UAAA,GAAG,EAAEA,IAAI,CAACC,IADd;AAEI,UAAA,SAAS,EAAED,IAAI,CAACC,IAFpB;AAGI,UAAA,MAAM,EAAED,IAAI,CAACE,MAHjB;AAII,UAAA,SAAS,EAAEF,IAAI,CAACG,KAAL,CAAW,KAAX,EAAkBC,KAJjC;AAKI,UAAA,kBAAkB,EAAEJ,IAAI,CAACG,KAAL,CAAW,KAAX,EAAkBE,kBAL1C;AAMI,UAAA,iBAAiB,EAAEL,IAAI,CAACG,KAAL,CAAW,KAAX,EAAkBG,iBANzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADmB;AAAA,OAAhB,CAAP;AAUH;;;6BAEQ;AACL,aACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKC,eAAL,EADL,CADJ;AAKH;;;;EA3ByBnB,S;;AA8B9B,SAASoB,eAAT,CAAyBC,KAAzB,EAAgC;AAC5B,SAAO;AACHX,IAAAA,MAAM,EAAEW,KAAK,CAACX;AADX,GAAP;AAGH;;AAGD,eAAeT,OAAO,CAACmB,eAAD,EAAkB;AAAEjB,EAAAA,aAAa,EAAbA;AAAF,CAAlB,CAAP,CAA4CE,eAA5C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { View, Text, ScrollView, StyleSheet } from 'react-native';\nimport { Spinner } from 'react-native-loading-spinner-overlay'\n\nimport FetchCoinData from './../Actions/FetchCoinData';\nimport CoinCard from './CoinCard'\n\n\nclass CryptoContainer extends Component {\n\n    componentDidMount() {\n        this.props.FetchCoinData().then(data => this.setState({crypto: data}));\n    }\n\n    renderCoinCards() {\n        const { crypto } = this.props\n\n        return crypto.data.map((coin) => \n            <CoinCard \n                key={coin.name}\n                coin_name={coin.name}\n                symbol={coin.symbol}\n                price_gbp={coin.quote[\"GBP\"].price}\n                percent_change_24h={coin.quote['GBP'].percent_change_24h}\n                percent_change_7d={coin.quote['GBP'].percent_change_7d}\n            />\n        ) \n    }\n\n    render() {\n        return (\n            <View>\n                {this.renderCoinCards()}\n            </View>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        crypto: state.crypto\n    }\n}\n\n\nexport default connect(mapStateToProps, { FetchCoinData })(CryptoContainer)"]},"metadata":{},"sourceType":"module"}